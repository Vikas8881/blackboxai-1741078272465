@page "/"
@inject HttpClient Http
@inject ICurrencyService CurrencyService
@inject ICartService CartService
@inject IToastService ToastService

<div class="space-y-12">
    <!-- Hero Section -->
    <div class="relative bg-indigo-600">
        <div class="max-w-7xl mx-auto py-24 px-4 sm:px-6 lg:px-8">
            <div class="text-center">
                <h1 class="text-4xl font-extrabold tracking-tight text-white sm:text-5xl md:text-6xl">
                    Welcome to Stalker E-Commerce
                </h1>
                <p class="mt-6 max-w-2xl mx-auto text-xl text-indigo-100">
                    Discover amazing products at competitive prices. Shop with confidence and earn rewards.
                </p>
                <div class="mt-10 flex justify-center space-x-4">
                    <a href="products" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50">
                        Shop Now
                    </a>
                    <a href="register" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-500 hover:bg-indigo-400">
                        Become a Reseller
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Featured Categories -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-6">Featured Categories</h2>
        @if (isLoading)
        {
            <LoadingSpinner IsLoading="true" Message="Loading categories..." />
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                @foreach (var category in featuredCategories)
                {
                    <a href="@($"products/{category.Slug}")" class="group">
                        <div class="relative rounded-lg overflow-hidden">
                            <img src="@(string.IsNullOrEmpty(category.Image) ? "/images/placeholder.png" : category.Image)" 
                                 alt="@category.Name" 
                                 class="w-full h-64 object-cover transform group-hover:scale-105 transition-transform duration-200"/>
                            <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center">
                                <h3 class="text-2xl font-bold text-white">@category.Name</h3>
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
    </div>

    <!-- Featured Products -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-6">Featured Products</h2>
        @if (isLoading)
        {
            <LoadingSpinner IsLoading="true" Message="Loading products..." />
        }
        else
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                @foreach (var product in featuredProducts)
                {
                    <div class="group">
                        <div class="relative rounded-lg overflow-hidden">
                            <img src="@(string.IsNullOrEmpty(product.MainImage) ? "/images/placeholder.png" : product.MainImage)" 
                                 alt="@product.Name" 
                                 class="w-full h-48 object-cover transform group-hover:scale-105 transition-transform duration-200"/>
                            @if (product.DiscountedPrice.HasValue)
                            {
                                <div class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded-md text-sm">
                                    Sale!
                                </div>
                            }
                        </div>
                        <div class="mt-4">
                            <h3 class="text-lg font-medium text-gray-900">@product.Name</h3>
                            <div class="mt-1 flex items-center">
                                @if (product.DiscountedPrice.HasValue)
                                {
                                    <span class="text-lg font-bold text-red-600">@FormatPrice(product.DiscountedPrice.Value)</span>
                                    <span class="ml-2 text-sm text-gray-500 line-through">@FormatPrice(product.BasePrice)</span>
                                }
                                else
                                {
                                    <span class="text-lg font-bold text-gray-900">@FormatPrice(product.BasePrice)</span>
                                }
                            </div>
                            <button @onclick="() => AddToCart(product)" 
                                    class="mt-4 w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 transition-colors duration-200">
                                Add to Cart
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Features -->
    <div class="bg-gray-50 py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div class="text-center">
                    <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-600 text-white mx-auto">
                        <i class="fas fa-truck text-xl"></i>
                    </div>
                    <h3 class="mt-4 text-lg font-medium text-gray-900">Free Shipping</h3>
                    <p class="mt-2 text-base text-gray-500">Free shipping on orders over $100</p>
                </div>
                <div class="text-center">
                    <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-600 text-white mx-auto">
                        <i class="fas fa-shield-alt text-xl"></i>
                    </div>
                    <h3 class="mt-4 text-lg font-medium text-gray-900">Secure Payments</h3>
                    <p class="mt-2 text-base text-gray-500">100% secure payment processing</p>
                </div>
                <div class="text-center">
                    <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-600 text-white mx-auto">
                        <i class="fas fa-undo text-xl"></i>
                    </div>
                    <h3 class="mt-4 text-lg font-medium text-gray-900">Easy Returns</h3>
                    <p class="mt-2 text-base text-gray-500">30-day return policy</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<Category> featuredCategories = new();
    private List<Product> featuredProducts = new();
    private Currency? currentCurrency;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentCurrency = await CurrencyService.GetCurrentCurrency();
            await LoadFeaturedCategories();
            await LoadFeaturedProducts();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadFeaturedCategories()
    {
        try
        {
            var response = await Http.GetAsync("api/categories?featured=true");
            if (response.IsSuccessStatusCode)
            {
                featuredCategories = await response.Content.ReadFromJsonAsync<List<Category>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to load categories");
        }
    }

    private async Task LoadFeaturedProducts()
    {
        try
        {
            var response = await Http.GetAsync("api/products?featured=true");
            if (response.IsSuccessStatusCode)
            {
                featuredProducts = await response.Content.ReadFromJsonAsync<List<Product>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to load products");
        }
    }

    private async Task AddToCart(Product product)
    {
        try
        {
            await CartService.AddToCart(product);
            ToastService.ShowSuccess("Product added to cart");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to add product to cart");
        }
    }

    private string FormatPrice(decimal price)
    {
        return CurrencyService.FormatPrice(price, currentCurrency);
    }
}
