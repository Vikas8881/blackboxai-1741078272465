@page "/samples"
@using StalkerModels.Models
@inject HttpClient Http

<PageTitle>Samples - StalkerUI</PageTitle>

<div class="bg-white shadow rounded-lg p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-900">Samples</h1>
        <button @onclick="() => ShowModal(new Sample())" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center">
            <i class="fas fa-plus mr-2"></i> Add New
        </button>
    </div>

    @if (samples == null)
    {
        <div class="flex justify-center items-center p-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (!samples.Any())
    {
        <div class="text-center py-8">
            <p class="text-gray-500">No samples found. Create one to get started!</p>
        </div>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var sample in samples)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap">@sample.Name</td>
                            <td class="px-6 py-4">@sample.Description</td>
                            <td class="px-6 py-4 whitespace-nowrap">@sample.CreatedAt.ToString("g")</td>
                            <td class="px-6 py-4 text-right">
                                <button @onclick="() => ShowModal(sample)" class="text-blue-600 hover:text-blue-900 mr-3">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button @onclick="() => DeleteSample(sample.Id)" class="text-red-600 hover:text-red-900">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (showModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" @onclick="CloseModal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
             @onclick:stopPropagation="true">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">
                    @(currentSample.Id == 0 ? "Create New Sample" : "Edit Sample")
                </h3>
                <div class="mt-2 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Name</label>
                        <input type="text" @bind="currentSample.Name"
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea @bind="currentSample.Description" rows="3"
                                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                    </div>
                </div>
            </div>
            <div class="flex justify-end gap-3 mt-4">
                <button @onclick="CloseModal"
                        class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
                    Cancel
                </button>
                <button @onclick="SaveSample"
                        class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                    Save
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<Sample>? samples;
    private bool showModal = false;
    private Sample currentSample = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSamples();
    }

    private async Task LoadSamples()
    {
        try
        {
            samples = await Http.GetFromJsonAsync<List<Sample>>("api/samples");
        }
        catch (Exception ex)
        {
            // TODO: Add error handling
            Console.WriteLine($"Error loading samples: {ex.Message}");
        }
    }

    private void ShowModal(Sample sample)
    {
        currentSample = sample.Id == 0 ? new Sample() : new Sample
        {
            Id = sample.Id,
            Name = sample.Name,
            Description = sample.Description,
            CreatedAt = sample.CreatedAt,
            UpdatedAt = sample.UpdatedAt
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentSample = new Sample();
    }

    private async Task SaveSample()
    {
        try
        {
            if (currentSample.Id == 0)
            {
                await Http.PostAsJsonAsync("api/samples", currentSample);
            }
            else
            {
                await Http.PutAsJsonAsync($"api/samples/{currentSample.Id}", currentSample);
            }

            await LoadSamples();
            CloseModal();
        }
        catch (Exception ex)
        {
            // TODO: Add error handling
            Console.WriteLine($"Error saving sample: {ex.Message}");
        }
    }

    private async Task DeleteSample(int id)
    {
        try
        {
            await Http.DeleteAsync($"api/samples/{id}");
            await LoadSamples();
        }
        catch (Exception ex)
        {
            // TODO: Add error handling
            Console.WriteLine($"Error deleting sample: {ex.Message}");
        }
    }
}
