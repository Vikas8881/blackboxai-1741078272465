@page "/login"
@inject IAuthService AuthService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Sign in to your account
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Or
                <a href="register" class="font-medium text-indigo-600 hover:text-indigo-500">
                    create a new account
                </a>
            </p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="mt-8 space-y-6">
            <DataAnnotationsValidator />

            <div class="rounded-md shadow-sm -space-y-px">
                <div>
                    <label for="email" class="sr-only">Email address</label>
                    <InputText id="email" 
                              type="email"
                              @bind-Value="loginModel.Email"
                              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                              placeholder="Email address" />
                    <ValidationMessage For="@(() => loginModel.Email)" class="text-red-500 text-sm mt-1" />
                </div>
                <div>
                    <label for="password" class="sr-only">Password</label>
                    <InputText type="password" 
                              id="password" 
                              @bind-Value="loginModel.Password"
                              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                              placeholder="Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-red-500 text-sm mt-1" />
                </div>
            </div>

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <InputCheckbox id="remember-me" 
                                 @bind-Value="loginModel.RememberMe"
                                 class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
                    <label for="remember-me" class="ml-2 block text-sm text-gray-900">
                        Remember me
                    </label>
                </div>

                <div class="text-sm">
                    <a href="forgot-password" class="font-medium text-indigo-600 hover:text-indigo-500">
                        Forgot your password?
                    </a>
                </div>
            </div>

            <div>
                <button type="submit" 
                        disabled="@isLoading"
                        class="@(isLoading ? "opacity-75 cursor-not-allowed" : "") group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    @if (isLoading)
                    {
                        <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                            <div class="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full"></div>
                        </span>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                            <i class="fas fa-sign-in-alt"></i>
                        </span>
                        <span>Sign in</span>
                    }
                </button>
            </div>
        </EditForm>

        <div class="mt-6">
            <div class="relative">
                <div class="absolute inset-0 flex items-center">
                    <div class="w-full border-t border-gray-300"></div>
                </div>
                <div class="relative flex justify-center text-sm">
                    <span class="px-2 bg-gray-50 text-gray-500">
                        Or continue with
                    </span>
                </div>
            </div>

            <div class="mt-6 grid grid-cols-2 gap-3">
                <button type="button" 
                        @onclick="SignInWithGoogle"
                        class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    <i class="fab fa-google text-red-500 mr-2"></i>
                    Google
                </button>
                <button type="button"
                        @onclick="SignInWithFacebook" 
                        class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    <i class="fab fa-facebook text-blue-500 mr-2"></i>
                    Facebook
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private bool isLoading;
    private string? returnUrl;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param))
        {
            returnUrl = param.First();
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            var result = await AuthService.Login(loginModel);

            if (result.Success)
            {
                ToastService.ShowSuccess("Successfully signed in");
                NavigationManager.NavigateTo(returnUrl ?? "/");
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("An unexpected error occurred");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SignInWithGoogle()
    {
        // TODO: Implement Google sign-in
        ToastService.ShowInfo("Google sign-in coming soon");
    }

    private void SignInWithFacebook()
    {
        // TODO: Implement Facebook sign-in
        ToastService.ShowInfo("Facebook sign-in coming soon");
    }
}
